package snapshot7_test

import (
	"testing"

	"github.com/teeworlds-go/protocol/internal/testutils/require"
	"github.com/teeworlds-go/protocol/messages7"
	"github.com/teeworlds-go/protocol/network7"
	"github.com/teeworlds-go/protocol/packer"
	"github.com/teeworlds-go/protocol/protocol7"
	"github.com/teeworlds-go/protocol/snapshot7"
	"github.com/teeworlds-go/protocol/teeworlds7"
)

// localhost go client on ddnet server with dbg dummies
// and tune zone projectiles

func Test4PartSnap(t *testing.T) {
	t.Parallel()
	// snapshot captured with tcpdump
	// generated by a ddnet 0.7 bridge server
	// used the go client to connect
	//
	// libtw2 dissector details
	// User Datagram Protocol, Src Port: 8303, Dst Port: 35428
	// Teeworlds 0.7 Protocol packet
	// Teeworlds 0.7 Protocol chunk: sys.snap
	//     Header (non-vital)
	//     Message: sys.snap
	//     Tick: 20350
	//     Delta tick: 20351
	//     Num parts: 4
	//     Part: 0
	//     Crc: 488896130
	//     Data (900 bytes)
	dumpPart1 := []byte{
		0x10, 0x04, 0x01, 0x01, 0x02, 0x03,
		0x04, 0xf4, 0xf0, 0x0e, 0x5d, 0x17, 0x84, 0xca, 0x2e, 0x08, 0x2f, 0x4b, 0xd7, 0xc0, 0xa9, 0x69,
		0x5a, 0x68, 0xa4, 0x4f, 0xbd, 0xb7, 0xca, 0x92, 0x16, 0x9e, 0x69, 0x28, 0x9e, 0x49, 0xc5, 0x77,
		0x4c, 0x83, 0x97, 0x42, 0x8e, 0x78, 0x52, 0x03, 0x85, 0x7e, 0xd3, 0x20, 0x7a, 0xf7, 0x30, 0xe0,
		0x5b, 0xaa, 0xb0, 0x49, 0x57, 0xd2, 0xc2, 0xf3, 0xa3, 0x2b, 0x43, 0xa1, 0x34, 0x8f, 0x7a, 0xc5,
		0xdd, 0x4f, 0x8a, 0x82, 0xba, 0x15, 0x6a, 0x48, 0x53, 0x0e, 0xc5, 0xae, 0xe6, 0x24, 0xc5, 0xe8,
		0xbb, 0x20, 0x69, 0xe1, 0xe9, 0x4a, 0x31, 0xcd, 0xf7, 0x61, 0xf4, 0xbe, 0x52, 0x86, 0x25, 0x8e,
		0x92, 0x4a, 0x0d, 0xd6, 0x75, 0x9f, 0xf5, 0x74, 0x02, 0xc5, 0x26, 0xa6, 0xeb, 0xe4, 0x25, 0x69,
		0xe1, 0x41, 0xb1, 0xe2, 0xf9, 0xd1, 0x35, 0x08, 0x8d, 0xae, 0xc1, 0x04, 0x19, 0xf3, 0x37, 0x01,
		0xd3, 0xca, 0x11, 0x3f, 0x38, 0x0c, 0x2c, 0xb7, 0x24, 0x29, 0xef, 0x5e, 0x49, 0x0b, 0x8f, 0x3f,
		0x55, 0xb9, 0xda, 0x34, 0xe4, 0xae, 0x0c, 0x93, 0x0f, 0xb9, 0x32, 0x2a, 0xbe, 0x89, 0x7c, 0x04,
		0xe8, 0xf9, 0x4b, 0xbd, 0x69, 0x48, 0x9d, 0x3b, 0x95, 0x25, 0x2d, 0x5a, 0xb8, 0x0a, 0x56, 0x65,
		0x1f, 0x86, 0x4c, 0x80, 0x36, 0x0f, 0x69, 0x51, 0x78, 0xfe, 0x2b, 0xa5, 0x2b, 0x69, 0x51, 0xec,
		0x8f, 0x95, 0xd2, 0x95, 0xb4, 0x40, 0xb1, 0xbf, 0x57, 0x29, 0x5d, 0x49, 0x0b, 0x4f, 0x60, 0x7f,
		0x7b, 0xa5, 0x74, 0x25, 0x2d, 0xec, 0x02, 0xfb, 0xdb, 0x54, 0x4a, 0x57, 0xd2, 0xc2, 0x46, 0x60,
		0x7f, 0xb7, 0x4a, 0xe9, 0x4a, 0x5a, 0xb8, 0x09, 0xec, 0x4f, 0x2a, 0xa5, 0x2b, 0x69, 0x41, 0x04,
		0xf6, 0x67, 0x56, 0x4a, 0x57, 0xd2, 0x82, 0x29, 0xb0, 0xbf, 0xbe, 0x52, 0xba, 0x92, 0x16, 0x7a,
		0x81, 0xfd, 0xfd, 0x2b, 0xa5, 0x2b, 0x69, 0xe1, 0x2f, 0xb0, 0xbf, 0xbc, 0x52, 0xba, 0x92, 0x16,
		0x72, 0x81, 0xfd, 0x9d, 0x4a, 0xe9, 0x4a, 0x5a, 0x38, 0x02, 0xfb, 0xd3, 0x57, 0x4a, 0x57, 0xd2,
		0x82, 0x5e, 0x60, 0x7f, 0x77, 0x95, 0xd2, 0x95, 0xb4, 0x70, 0x27, 0xb0, 0xbf, 0xba, 0x52, 0xba,
		0x92, 0x16, 0x6a, 0x81, 0xfd, 0x4d, 0x55, 0x4a, 0x57, 0xd2, 0xc2, 0x94, 0xc0, 0xfe, 0xdc, 0x4a,
		0xe9, 0x4a, 0x5a, 0x70, 0x05, 0xf6, 0x57, 0x55, 0x29, 0x5d, 0x49, 0x0b, 0x55, 0x02, 0xfb, 0xc3,
		0x57, 0x4a, 0x57, 0xd2, 0x02, 0x5e, 0x60, 0x7f, 0xdf, 0x2a, 0xa5, 0x2b, 0x69, 0xe1, 0x9b, 0xc0,
		0xfe, 0x34, 0x2a, 0xa5, 0x2b, 0x69, 0x41, 0x43, 0x60, 0x7f, 0x3e, 0x95, 0xd2, 0x95, 0xb4, 0xe0,
		0x23, 0xb0, 0x3f, 0xa4, 0x52, 0xba, 0x92, 0x16, 0x10, 0x81, 0xfd, 0x79, 0x56, 0x4a, 0x57, 0xd2,
		0x82, 0xa7, 0xc0, 0xfe, 0x12, 0x2a, 0xa5, 0x2b, 0x69, 0x21, 0x41, 0x60, 0x7f, 0x68, 0x95, 0xd2,
		0x95, 0xb4, 0x80, 0x26, 0xb0, 0xbf, 0x82, 0x4a, 0xe9, 0x4a, 0x5a, 0x28, 0x10, 0xd8, 0xdf, 0x5c,
		0x29, 0x5d, 0x49, 0x0b, 0xb3, 0xc0, 0xfe, 0xca, 0x95, 0xd2, 0x95, 0xb4, 0x50, 0x16, 0xd8, 0xdf,
		0xa5, 0x4a, 0xe9, 0x4a, 0x5a, 0xb8, 0x24, 0xb0, 0x3f, 0xeb, 0x4a, 0xe9, 0x4a, 0x5a, 0xb0, 0x16,
		0xd8, 0x9f, 0x51, 0xa5, 0x74, 0x25, 0x2d, 0x18, 0x09, 0xec, 0xaf, 0xbb, 0x52, 0xba, 0x92, 0x16,
		0xba, 0x05, 0xf6, 0x37, 0xbd, 0x52, 0xba, 0x92, 0x16, 0xa6, 0x0b, 0xec, 0x0f, 0xa3, 0x52, 0xba,
		0x92, 0x16, 0x30, 0x04, 0xf6, 0x57, 0x54, 0x29, 0x5d, 0x49, 0x0b, 0x45, 0x02, 0xfb, 0x6b, 0xaf,
		0x94, 0xae, 0xa4, 0x85, 0x76, 0x81, 0xfd, 0x65, 0x55, 0x4a, 0x57, 0xd2, 0x42, 0x96, 0xc0, 0xfe,
		0xd6, 0x4a, 0xe9, 0x4a, 0x5a, 0x58, 0x05, 0xf6, 0xd7, 0xa9, 0x94, 0xae, 0xa4, 0x85, 0x8e, 0xc0,
		0xfe, 0x12, 0x2b, 0xa5, 0x2b, 0x69, 0x21, 0x51, 0x60, 0x7f, 0xbf, 0x2a, 0xa5, 0x2b, 0x69, 0xe1,
		0x97, 0xc0, 0xfe, 0xb4, 0x2b, 0xa5, 0x2b, 0x69, 0x41, 0x5b, 0x60, 0x7f, 0x5b, 0x2b, 0xa5, 0x2b,
		0x69, 0x61, 0xab, 0xc0, 0xfe, 0x2e, 0x56, 0x4a, 0x57, 0xd2, 0xc2, 0x45, 0x81, 0xfd, 0x2d, 0xab,
		0x94, 0xae, 0xa4, 0x85, 0x65, 0x02, 0xfb, 0xbb, 0x5e, 0x29, 0x5d, 0x49, 0x0b, 0xd7, 0x05, 0xf6,
		0xf7, 0xa9, 0x52, 0xba, 0x92, 0x16, 0x3e, 0x09, 0xec, 0xef, 0x4b, 0xa5, 0x74, 0x25, 0x2d, 0x7c,
		0x11, 0xd8, 0x5f, 0xeb, 0x4a, 0xe9, 0x4a, 0x5a, 0x68, 0x2d, 0xb0, 0x3f, 0x8f, 0x2a, 0xa5, 0x2b,
		0x69, 0xc1, 0x23, 0x81, 0xfd, 0x39, 0xba, 0x52, 0xba, 0x92, 0x16, 0x1c, 0x2d, 0xb0, 0xbf, 0xaf,
		0xa9, 0x94, 0xae, 0xa4, 0x85, 0xaf, 0x11, 0xd8, 0x5f, 0x71, 0x2a, 0xa5, 0x2b, 0x69, 0xa1, 0x38,
		0x02, 0xfb, 0x53, 0x57, 0xa5, 0x74, 0x25, 0x2d, 0xa8, 0x4b, 0x60, 0x7f, 0x38, 0xaf, 0x94, 0xae,
		0xa4, 0x05, 0x9c, 0x0b, 0xec, 0x0f, 0xa5, 0x95, 0xd2, 0x95, 0xb4, 0x80, 0x52, 0x81, 0xfd, 0xe9,
		0xac, 0x52, 0xba, 0x92, 0x16, 0x74, 0x26, 0xb0, 0xbf, 0x0f, 0xaf, 0x94, 0xae, 0xa4, 0x85, 0x0f,
		0x17, 0xd8, 0x9f, 0x0e, 0x95, 0xd2, 0x95, 0xb4, 0xa0, 0x83, 0xc0, 0xfe, 0xa6, 0xa5, 0x52, 0xba,
		0x92, 0x16, 0xa6, 0x45, 0x60, 0x7f, 0xa9, 0xa8, 0x94, 0xae, 0xa4, 0x85, 0x54, 0x08, 0xac, 0x97,
		0xc8, 0xcb, 0x05, 0xc5, 0x0d,
	}

	// 1st part -> 108	0.921513	8303	35428	TW7	789	sys.snap
	//             109	0.921532	8303	35428	TW7	722	sys.snap
	//             110	0.921548	8303	35428	TW7	737	sys.snap
	//             111	0.921560	8303	35428	TW7	783	sys.snap

	packet := protocol7.Packet{}
	err := packet.Unpack(dumpPart1)
	require.NoError(t, err)

	// TODO: not working yet
	// conn := protocol7.Session{}
	// conn.Ack = packet.Header.Ack
	// repack := packet.Pack(&conn)
	// require.Equal(t, dump, repack)

	// content
	require.Equal(t, 1, len(packet.Messages))
	require.Equal(t, network7.MsgSysSnap, packet.Messages[0].MsgId())
	part0, ok := packet.Messages[0].(*messages7.Snap)
	require.Equal(t, true, ok)
	require.Equal(t, 20350, part0.GameTick)
	require.Equal(t, 20351, part0.DeltaTick)
	require.Equal(t, 4, part0.NumParts)
	require.Equal(t, 0, part0.Part)
	require.Equal(t, 488896130, part0.Crc)

	// Teeworlds 0.7 Protocol packet
	// Teeworlds 0.7 Protocol chunk: sys.snap
	//     Header (non-vital)
	//     Message: sys.snap
	//     Tick: 20350
	//     Delta tick: 20351
	//     Num parts: 4
	//     Part: 1
	//     Crc: 488896130
	//     Data (900 bytes)
	dumpPart2 := []byte{
		0x10, 0x04, 0x01, 0x01, 0x02, 0x03, 0x04,
		0xf4, 0xf0, 0x0e, 0x5d, 0x17, 0x84, 0xca, 0x2e, 0x08, 0x0f, 0x59, 0xba, 0x06, 0x4e, 0x4d,
		0xd3, 0x42, 0x23, 0xbd, 0x00, 0xbe, 0x51, 0xe0, 0xb9, 0x52, 0x62, 0x9a, 0x36, 0x7c, 0x63, 0xb3,
		0xd2, 0x2c, 0x7d, 0xf3, 0xa3, 0xf7, 0x7e, 0xea, 0xba, 0xb0, 0xdf, 0x05, 0x49, 0x0b, 0x89, 0x7a,
		0x00, 0x6c, 0x80, 0xae, 0x0b, 0x71, 0xa9, 0x73, 0xa3, 0xde, 0x05, 0x51, 0x49, 0xef, 0x22, 0x5d,
		0x17, 0x84, 0x6d, 0x7a, 0x57, 0xdb, 0x4d, 0x53, 0xf1, 0xec, 0xf9, 0xc6, 0x06, 0x2b, 0x6d, 0x9b,
		0xde, 0xd5, 0xf6, 0x8f, 0xf6, 0x5d, 0x90, 0xb4, 0x70, 0x51, 0x0f, 0x00, 0x8d, 0x22, 0xbe, 0x92,
		0x9e, 0x35, 0x5d, 0x17, 0x04, 0xf4, 0x8e, 0x1f, 0xec, 0x92, 0x52, 0x29, 0xf2, 0x8d, 0x0d, 0x56,
		0x1a, 0x7a, 0xc7, 0x0f, 0xf6, 0x8f, 0xf6, 0x5d, 0x90, 0xb4, 0x60, 0xad, 0x07, 0x80, 0x46, 0x51,
		0xbc, 0x92, 0xde, 0x86, 0xae, 0x0b, 0xc2, 0x47, 0xf4, 0x7e, 0xb0, 0x53, 0xbd, 0x8f, 0x2c, 0xf2,
		0x8d, 0x0d, 0x56, 0xda, 0x47, 0xf4, 0x7e, 0xb0, 0x7f, 0xb4, 0xef, 0x82, 0xa4, 0x85, 0x8d, 0x1e,
		0x00, 0x1a, 0x45, 0x8b, 0x57, 0xd2, 0xd3, 0xa0, 0xeb, 0x82, 0xf0, 0x83, 0xe3, 0x07, 0xbb, 0x09,
		0x4a, 0xb1, 0xc8, 0x37, 0x36, 0x58, 0x69, 0x3f, 0x38, 0x7e, 0xb0, 0x7f, 0xb4, 0xef, 0x82, 0xa4,
		0x05, 0x0d, 0x3d, 0x00, 0x34, 0x8a, 0xde, 0x2b, 0xe9, 0x7d, 0x38, 0x5d, 0x17, 0x84, 0x4c, 0x1a,
		0x3e, 0xf2, 0x74, 0xcd, 0x9d, 0x4b, 0x7c, 0x63, 0xb3, 0xd2, 0xfc, 0x69, 0xf8, 0xc8, 0x7b, 0x97,
		0xa9, 0x2c, 0xec, 0x77, 0x41, 0xd2, 0xc2, 0x87, 0xeb, 0x01, 0xb0, 0xa1, 0xa8, 0xb2, 0x10, 0xed,
		0xa5, 0xce, 0xcd, 0x7d, 0x17, 0x44, 0x25, 0x3d, 0x3c, 0x5d, 0x17, 0x84, 0x89, 0xe4, 0x7e, 0xb0,
		0x4b, 0x2d, 0x14, 0x89, 0x7c, 0x63, 0x83, 0x95, 0x36, 0x91, 0xdc, 0x0f, 0xf6, 0x8f, 0xf6, 0x5d,
		0x90, 0xb4, 0x80, 0xd7, 0x03, 0x40, 0xa3, 0x68, 0xf3, 0x4a, 0x7a, 0x08, 0x5d, 0x17, 0x84, 0xec,
		0x72, 0x3f, 0xd8, 0x5d, 0xb3, 0xec, 0x22, 0xdf, 0xd8, 0x60, 0xa5, 0x65, 0x97, 0xfb, 0xc1, 0xfe,
		0xd1, 0xbe, 0x0b, 0x92, 0x16, 0x10, 0x3d, 0x00, 0x34, 0x8a, 0x6e, 0xaf, 0xa4, 0xb7, 0xf2, 0x73,
		0x41, 0xb8, 0xcf, 0x93, 0x85, 0x47, 0xbd, 0x1b, 0x14, 0xc9, 0xf9, 0xc6, 0x06, 0x2b, 0xad, 0x21,
		0x4f, 0xc5, 0xbc, 0x8f, 0xf6, 0x5d, 0x90, 0xb4, 0xb0, 0xea, 0x01, 0x70, 0xb1, 0x48, 0x4a, 0x9d,
		0xdb, 0x4a, 0x7a, 0xd7, 0xe9, 0xba, 0x20, 0x5c, 0xf0, 0xf7, 0x83, 0x5d, 0xd7, 0xa4, 0x60, 0xbe,
		0xb1, 0xc1, 0x4a, 0xbb, 0xe0, 0xef, 0x07, 0xfb, 0x47, 0xfb, 0x2e, 0x48, 0x5a, 0xb8, 0xae, 0x07,
		0x80, 0x46, 0x91, 0xf9, 0x4a, 0x7a, 0x5f, 0x43, 0xd7, 0x05, 0x41, 0xcd, 0xdf, 0x65, 0xde, 0x7c,
		0x63, 0x83, 0x95, 0xa6, 0xe6, 0xef, 0x32, 0xef, 0xa3, 0x7d, 0x17, 0x24, 0x2d, 0x7c, 0x8d, 0x1e,
		0x00, 0x1a, 0x45, 0xfd, 0x2b, 0xe9, 0xb5, 0xbb, 0xe0, 0x82, 0xd0, 0x08, 0x61, 0xcc, 0xb3, 0x6d,
		0x41, 0x9d, 0x7a, 0xbe, 0xb1, 0x59, 0x69, 0xbf, 0x41, 0x58, 0x78, 0xef, 0x33, 0x5d, 0x61, 0xbf,
		0x0b, 0x92, 0x16, 0xda, 0xf5, 0x00, 0x28, 0x6b, 0x48, 0x57, 0x88, 0xf2, 0x52, 0xe7, 0x46, 0x8b,
		0x97, 0xa8, 0xa4, 0x97, 0xd3, 0x75, 0x41, 0x50, 0xf3, 0xf7, 0xb1, 0xd7, 0xd7, 0x35, 0x44, 0xbe,
		0xb1, 0xc1, 0x4a, 0x53, 0xf3, 0xf7, 0xb1, 0xf7, 0xd1, 0xbe, 0x0b, 0x92, 0x16, 0x72, 0x3d, 0x00,
		0x34, 0x8a, 0xce, 0x2b, 0xe9, 0x09, 0x5d, 0x17, 0x04, 0x35, 0x7f, 0x3f, 0xbd, 0xf9, 0xc6, 0x06,
		0x2b, 0x4d, 0xcd, 0xdf, 0x4f, 0xef, 0xa3, 0x7d, 0x17, 0x24, 0x2d, 0x88, 0x1e, 0x00, 0x1a, 0x45,
		0x77, 0xaf, 0xa4, 0xa7, 0x2e, 0xba, 0x2e, 0x08, 0x57, 0xc9, 0x29, 0xf0, 0xa0, 0x90, 0x4b, 0xd3,
		0x86, 0x6f, 0x6c, 0xb0, 0xd2, 0xae, 0x92, 0x53, 0xe0, 0x7d, 0xb4, 0xef, 0x82, 0xa4, 0x05, 0x75,
		0xe9, 0x01, 0xa0, 0x51, 0x84, 0x7f, 0x25, 0x3d, 0x8f, 0xe8, 0xba, 0x20, 0xfc, 0xe8, 0x98, 0xd8,
		0xa3, 0x66, 0xc1, 0x98, 0x04, 0xbe, 0xb1, 0xc1, 0x4a, 0xfb, 0xd1, 0x31, 0xb1, 0xf7, 0xd1, 0xbe,
		0x0b, 0x92, 0x16, 0x3c, 0xd2, 0x03, 0x40, 0xa3, 0xe8, 0xdb, 0x2b, 0xe9, 0xe9, 0x79, 0xb9, 0x20,
		0x2c, 0xf9, 0x26, 0xd3, 0x63, 0x8c, 0x29, 0xbb, 0x0d, 0xdf, 0xd8, 0xac, 0xb4, 0x6d, 0xdf, 0xb4,
		0x78, 0x4f, 0x4b, 0xd7, 0x85, 0xfd, 0x2e, 0x48, 0x5a, 0xd0, 0xeb, 0x01, 0xb0, 0xa1, 0x40, 0xd7,
		0x85, 0x48, 0xa3, 0xd4, 0xb9, 0x29, 0x74, 0x41, 0x54, 0xd2, 0x73, 0xe9, 0xba, 0x20, 0x2c, 0x77,
		0x64, 0xf7, 0x4c, 0x80, 0x83, 0x3d, 0xdf, 0xd8, 0x60, 0xa5, 0x2d, 0x77, 0x64, 0xf7, 0x3e, 0x2a,
		0x6e, 0x00,
	}

	//             108	0.921513	8303	35428	TW7	789	sys.snap
	// 2nd part -> 109	0.921532	8303	35428	TW7	722	sys.snap
	//             110	0.921548	8303	35428	TW7	737	sys.snap
	//             111	0.921560	8303	35428	TW7	783	sys.snap

	packet = protocol7.Packet{}
	err = packet.Unpack(dumpPart2)
	require.NoError(t, err)

	// content
	require.Equal(t, 1, len(packet.Messages))
	require.Equal(t, network7.MsgSysSnap, packet.Messages[0].MsgId())
	part1, ok := packet.Messages[0].(*messages7.Snap)
	require.Equal(t, true, ok)
	require.Equal(t, 20350, part1.GameTick)
	require.Equal(t, 20351, part1.DeltaTick)
	require.Equal(t, 4, part1.NumParts)
	require.Equal(t, 1, part1.Part)
	require.Equal(t, 488896130, part1.Crc)

	// Teeworlds 0.7 Protocol packet
	// Teeworlds 0.7 Protocol chunk: sys.snap
	//     Header (non-vital)
	//     Message: sys.snap
	//     Tick: 20350
	//     Delta tick: 20351
	//     Num parts: 4
	//     Part: 2
	//     Crc: 488896130
	//     Data (900 bytes)
	dumpPart3 := []byte{
		0x10, 0x04, 0x01, 0x01, 0x02, 0x03, 0x04,
		0xf4, 0xf0, 0x0e, 0x5d, 0x17, 0x84, 0xca, 0x2e, 0x08, 0x4f, 0xb0, 0x74, 0x0d, 0x9c, 0x9a,
		0xa6, 0x85, 0x46, 0x7a, 0xfb, 0x2e, 0x48, 0x5a, 0x70, 0xf5, 0x00, 0xd0, 0x28, 0xf2, 0x79, 0x25,
		0xbd, 0x69, 0xe1, 0xe5, 0x82, 0xe0, 0x94, 0x0f, 0x7f, 0xcf, 0x35, 0x11, 0xbe, 0xeb, 0xf1, 0x8d,
		0xcd, 0x4a, 0x6b, 0xc8, 0x87, 0x31, 0xef, 0x65, 0x57, 0x59, 0xd8, 0xef, 0x82, 0xa4, 0x85, 0x69,
		0xd1, 0x03, 0xa0, 0x4c, 0x53, 0x65, 0x21, 0x42, 0x4a, 0x9d, 0x9b, 0xdf, 0x5c, 0x10, 0x95, 0xf4,
		0x0a, 0xe8, 0xba, 0x20, 0xa8, 0xd0, 0xf0, 0xa3, 0xa7, 0x90, 0xb8, 0xda, 0x86, 0x6f, 0x6c, 0x56,
		0xda, 0x77, 0x34, 0x28, 0xf0, 0x9e, 0xbf, 0xae, 0x0b, 0xfb, 0x5d, 0x90, 0xb4, 0x50, 0xa0, 0x07,
		0x80, 0x86, 0x1f, 0x75, 0x5d, 0x88, 0x3c, 0x4b, 0x9d, 0x1b, 0x45, 0x17, 0x44, 0x25, 0xbd, 0xad,
		0x74, 0x5d, 0x10, 0x7e, 0x93, 0x53, 0xb3, 0x50, 0x41, 0xd1, 0x22, 0xdf, 0xd8, 0x28, 0x55, 0xda,
		0x6f, 0x72, 0x6a, 0x16, 0x1f, 0xed, 0xbb, 0x20, 0x69, 0x61, 0xab, 0x1e, 0x00, 0x1a, 0x45, 0xf3,
		0x2b, 0xe9, 0x3d, 0xba, 0x2e, 0x08, 0x1f, 0xcb, 0x5d, 0x66, 0xe1, 0x3b, 0x57, 0x2a, 0xa8, 0x57,
		0x3c, 0xe4, 0x1b, 0x9b, 0x95, 0xf6, 0xb1, 0xdc, 0x65, 0x16, 0xeb, 0xf5, 0xd1, 0xbe, 0x0b, 0x92,
		0x16, 0x9e, 0x1e, 0x00, 0x1a, 0x45, 0xd6, 0xaf, 0xa4, 0xd7, 0xd3, 0x75, 0x41, 0xf8, 0x58, 0x15,
		0x15, 0x0f, 0x26, 0x26, 0xf4, 0xc8, 0x37, 0x36, 0x58, 0x69, 0x5d, 0xa9, 0xa2, 0xe2, 0x7d, 0xb4,
		0xef, 0x82, 0xa4, 0x85, 0x5e, 0x0f, 0x00, 0x8d, 0xa2, 0xe9, 0xaf, 0xa4, 0xf7, 0x85, 0xae, 0x0b,
		0xc2, 0xbd, 0xaa, 0xa8, 0x78, 0xb6, 0x4c, 0xf2, 0x8d, 0x0d, 0x56, 0xda, 0x05, 0x55, 0x54, 0xbc,
		0x8f, 0xf6, 0x5d, 0x90, 0xb4, 0xf0, 0x45, 0x0f, 0x00, 0x8d, 0x22, 0x8c, 0x57, 0xd2, 0x4b, 0xa0,
		0xeb, 0x82, 0x80, 0xca, 0xa5, 0xe2, 0x69, 0xb4, 0x43, 0x8f, 0x7c, 0x63, 0x83, 0x95, 0x76, 0x15,
		0x97, 0x8a, 0xf7, 0xd1, 0xbe, 0x0b, 0x92, 0x16, 0x12, 0xf4, 0x00, 0xd8, 0x14, 0x15, 0x95, 0x3a,
		0xb7, 0x95, 0xf4, 0xca, 0x74, 0x5d, 0x10, 0x9c, 0xe1, 0xa9, 0x78, 0x9a, 0x6f, 0x21, 0x1d, 0xf9,
		0xc6, 0x06, 0x2b, 0xcd, 0x29, 0x3c, 0x15, 0xef, 0xa3, 0x7d, 0x17, 0x24, 0x2d, 0x94, 0xf5, 0x00,
		0xd0, 0x28, 0x6a, 0x7f, 0x25, 0x3d, 0x6d, 0xba, 0x2e, 0x08, 0x3f, 0x7d, 0xa3, 0xe2, 0x71, 0x56,
		0x00, 0x3d, 0xf2, 0x8d, 0x0d, 0x56, 0x9a, 0x03, 0x3c, 0x15, 0xef, 0xa3, 0x7d, 0x17, 0x24, 0x2d,
		0x68, 0xeb, 0x01, 0xb0, 0x29, 0xca, 0x2a, 0x75, 0x6e, 0x2b, 0xe9, 0xa1, 0x94, 0xae, 0x0b, 0xc2,
		0x6f, 0x34, 0xa8, 0x78, 0xd4, 0xf3, 0x94, 0x8e, 0x7c, 0x63, 0xb3, 0xd2, 0x2e, 0xf8, 0x46, 0xc5,
		0x7b, 0xa8, 0x2a, 0x0b, 0xfb, 0x5d, 0x90, 0xb4, 0x80, 0x52, 0x3d, 0x00, 0x36, 0xae, 0x52, 0x59,
		0x88, 0xd6, 0x52, 0xe7, 0xc6, 0xd9, 0x05, 0x51, 0x49, 0x0f, 0x83, 0xae, 0x0b, 0x82, 0x53, 0xdf,
		0xa8, 0x78, 0x1c, 0xe3, 0x9f, 0x6f, 0x6c, 0xb0, 0xd2, 0x3e, 0xfb, 0x46, 0xc5, 0xfb, 0x68, 0xdf,
		0x05, 0x49, 0x0b, 0x18, 0x7a, 0x00, 0x6c, 0x8a, 0x3a, 0xa5, 0xce, 0x6d, 0x25, 0xbd, 0x9a, 0xae,
		0x0b, 0x82, 0x31, 0x2e, 0x15, 0x8f, 0xea, 0x09, 0xf4, 0xc8, 0x37, 0x36, 0x58, 0x69, 0x3f, 0x70,
		0xa9, 0x78, 0x1f, 0xed, 0xbb, 0x20, 0x69, 0xa1, 0xd6, 0x03, 0x40, 0xa3, 0x28, 0xf1, 0x95, 0xf4,
		0x2e, 0xd1, 0x75, 0x41, 0x70, 0xa6, 0x41, 0xc5, 0xe3, 0x04, 0xe9, 0xc8, 0x37, 0x36, 0x2b, 0xcd,
		0x99, 0x06, 0x15, 0xef, 0xa1, 0xaa, 0x2c, 0xec, 0x77, 0x41, 0xd2, 0xc2, 0x25, 0x3d, 0x00, 0x36,
		0xae, 0x52, 0x59, 0x88, 0x2e, 0x96, 0x3a, 0x37, 0xce, 0x2e, 0x88, 0x4a, 0x7a, 0x3e, 0x74, 0x5d,
		0x10, 0x1c, 0x68, 0x50, 0xf1, 0x00, 0x4a, 0x47, 0xbe, 0xb1, 0x51, 0xaa, 0x34, 0x07, 0x1a, 0x54,
		0xbc, 0x8f, 0xf6, 0x5d, 0x90, 0xb4, 0xe0, 0xa3, 0x07, 0xc0, 0xb4, 0x14, 0x2d, 0x7b, 0x25, 0xbd,
		0x54, 0xd0, 0x75, 0x41, 0x40, 0xe5, 0x49, 0xc5, 0x73, 0xdf, 0x2d, 0xdf, 0xd8, 0x28, 0x55, 0x1a,
		0x2e, 0x4f, 0x2a, 0xde, 0x47, 0xfb, 0x2e, 0x48, 0x5a, 0x48, 0x85, 0x1e, 0x00, 0x17, 0x8b, 0xbe,
		0x94, 0x3a, 0xb7, 0x95, 0xf4, 0x66, 0xba, 0x2e, 0x08, 0xdf, 0x41, 0xa8, 0x78, 0x54, 0xaf, 0x97,
		0x8e, 0x7c, 0x63, 0xa3, 0x54, 0x69, 0xb8, 0x10, 0x2a, 0xde, 0x47, 0xfb, 0x2e, 0x48, 0x5a, 0x98,
		0xf5, 0x00, 0x98, 0x96, 0x22, 0x47, 0x97, 0x3a, 0xb7, 0x95, 0xf4, 0x70, 0x4e, 0xd7, 0x05, 0x61,
		0x92, 0x27, 0x15, 0xcf, 0x35, 0xfb, 0x4b, 0x47, 0xbe, 0xb1, 0x51, 0xaa, 0x34, 0x4c, 0x3c, 0xa9,
		0x78, 0x1f, 0xed, 0xbb, 0x20, 0x69, 0x01, 0xe7, 0x7a, 0x00, 0x4c, 0x4b, 0xd1, 0xd7, 0xbc, 0xe2,
		0x06,
	}

	//             108	0.921513	8303	35428	TW7	789	sys.snap
	//             109	0.921532	8303	35428	TW7	722	sys.snap
	// 3rd part -> 110	0.921548	8303	35428	TW7	737	sys.snap
	//             111	0.921560	8303	35428	TW7	783	sys.snap

	packet = protocol7.Packet{}
	err = packet.Unpack(dumpPart3)
	require.NoError(t, err)

	// content
	require.Equal(t, 1, len(packet.Messages))
	require.Equal(t, network7.MsgSysSnap, packet.Messages[0].MsgId())
	part2, ok := packet.Messages[0].(*messages7.Snap)
	require.Equal(t, true, ok)
	require.Equal(t, 20350, part2.GameTick)
	require.Equal(t, 20351, part2.DeltaTick)
	require.Equal(t, 4, part2.NumParts)
	require.Equal(t, 2, part2.Part)
	require.Equal(t, 488896130, part2.Crc)

	// Teeworlds 0.7 Protocol packet
	// Teeworlds 0.7 Protocol chunk: sys.snap
	//     Header (non-vital)
	//     Message: sys.snap
	//     Tick: 20350
	//     Delta tick: 20351
	//     Num parts: 4
	//     Part: 3
	//     Crc: 488896130
	//     Data (845 bytes)
	dumpPart4 := []byte{
		0x10, 0x04, 0x01, 0x01, 0x02, 0x03, 0x04,
		0x8e, 0xd9, 0xa1, 0xeb, 0x82, 0x50, 0xd9, 0x05, 0xe1, 0x59, 0xb0, 0x74, 0x0d, 0x9c, 0x9a,
		0xa6, 0x85, 0x1f, 0x1d, 0x25, 0xbd, 0x3f, 0x07, 0x17, 0x84, 0x34, 0x88, 0x14, 0x4f, 0x65, 0x26,
		0x9d, 0x10, 0xbe, 0xb1, 0x51, 0xaa, 0xb4, 0x26, 0x88, 0x16, 0xef, 0xb7, 0xef, 0x82, 0xa4, 0x85,
		0xbf, 0x1e, 0x00, 0xd3, 0x52, 0x54, 0x9c, 0x52, 0xe7, 0xb6, 0x92, 0xde, 0x8d, 0xae, 0x0b, 0xc2,
		0xe5, 0x7c, 0xa8, 0x78, 0x2e, 0xe7, 0x29, 0x1d, 0xf9, 0xc6, 0x46, 0xa9, 0xd2, 0x2e, 0xe7, 0x43,
		0xc5, 0xfb, 0x68, 0xdf, 0x05, 0x49, 0x0b, 0x37, 0x3d, 0x00, 0xa6, 0xa5, 0x48, 0x5d, 0xaf, 0xa4,
		0x67, 0x44, 0xd7, 0x05, 0xa1, 0x2b, 0x3e, 0x54, 0x3c, 0xea, 0xc4, 0x7c, 0x63, 0xa3, 0x54, 0x69,
		0x5d, 0xf1, 0xa1, 0xe2, 0x7d, 0xb4, 0xef, 0x82, 0xa4, 0x05, 0x23, 0x3d, 0x00, 0xa6, 0xa5, 0x08,
		0xe7, 0xa5, 0xce, 0x6d, 0x25, 0x3d, 0x34, 0xba, 0x2e, 0x08, 0x3f, 0x40, 0xa8, 0x78, 0x42, 0x3a,
		0xf2, 0x8d, 0x8d, 0x52, 0xa5, 0xfd, 0x00, 0xa1, 0xe2, 0x7d, 0xb4, 0xef, 0x82, 0xa4, 0x05, 0x34,
		0x3d, 0x00, 0xa6, 0xa5, 0x48, 0x87, 0x57, 0xf2, 0x68, 0x22, 0xac, 0x1a, 0xd6, 0x5d, 0xcf, 0xc4,
		0x08, 0xeb, 0x0e, 0xd6, 0x5d, 0x4f, 0x06, 0x9a, 0x74, 0x07, 0xeb, 0xae, 0xa7, 0x18, 0x9a, 0xa4,
		0x87, 0x75, 0xd7, 0x33, 0x10, 0xd6, 0x94, 0x49, 0x77, 0x3d, 0x98, 0x10, 0x56, 0x6d, 0xd2, 0x5d,
		0x8f, 0x05, 0x9a, 0x94, 0x9b, 0x74, 0xd7, 0xf3, 0x03, 0xc2, 0xea, 0x4d, 0xba, 0xeb, 0x99, 0x44,
		0x58, 0x2e, 0x2c, 0x7d, 0x8f, 0x31, 0x34, 0xc9, 0x85, 0xa5, 0xef, 0xf1, 0x47, 0x93, 0x7a, 0x58,
		0xfa, 0x9e, 0x1f, 0x11, 0x56, 0x95, 0x49, 0xfa, 0x1e, 0x2d, 0x34, 0xa9, 0xca, 0x24, 0x7d, 0x8f,
		0x02, 0x84, 0x25, 0x26, 0xe9, 0x7b, 0x32, 0x11, 0x16, 0x1e, 0xd6, 0xe9, 0xf9, 0x08, 0x4d, 0xc2,
		0xc3, 0x3a, 0x3d, 0x2d, 0x08, 0xeb, 0x06, 0xeb, 0xf4, 0x5c, 0x8d, 0x26, 0x7d, 0x33, 0xe9, 0xf4,
		0xa4, 0xa0, 0x49, 0x1a, 0xb0, 0xf2, 0x9e, 0x7b, 0x10, 0xd6, 0x37, 0x58, 0x79, 0x4f, 0x23, 0xc2,
		0xda, 0xc0, 0xca, 0x7b, 0x7e, 0x43, 0x58, 0xbb, 0x49, 0xff, 0x1e, 0x4b, 0x34, 0x69, 0x87, 0xd5,
		0xf7, 0xfc, 0x44, 0x58, 0x9e, 0xb0, 0x4c, 0xf4, 0x00, 0xc2, 0x7a, 0xb0, 0xcc, 0x9e, 0x54, 0xc0,
		0xf2, 0x34, 0xc9, 0x44, 0xcf, 0xb4, 0x98, 0xe4, 0x69, 0x92, 0x89, 0x1e, 0x1d, 0x4c, 0x7a, 0x26,
		0x99, 0x3d, 0x1f, 0x6e, 0x12, 0x02, 0x4b, 0xd0, 0xa3, 0x33, 0x93, 0x7c, 0x60, 0x09, 0x7a, 0x50,
		0x0a, 0x4b, 0x03, 0x96, 0xa0, 0x07, 0xe7, 0xb0, 0xbe, 0xc1, 0x12, 0xf4, 0xa8, 0x0b, 0x16, 0x1e,
		0x96, 0xa0, 0xa7, 0x38, 0xb0, 0xaa, 0x60, 0x09, 0x7a, 0xbe, 0x06, 0x96, 0x0b, 0x4b, 0xd0, 0xe3,
		0x68, 0x93, 0x5c, 0x58, 0x82, 0x1e, 0x8f, 0x4c, 0x9a, 0x82, 0x25, 0xe8, 0x69, 0x0d, 0xeb, 0x0e,
		0x96, 0xa0, 0xe7, 0x8b, 0x49, 0x7a, 0x58, 0x82, 0x9e, 0x4f, 0x26, 0xe5, 0xb0, 0x04, 0x3d, 0xd7,
		0x61, 0xf5, 0x26, 0x09, 0x7a, 0x96, 0xc1, 0x32, 0x4d, 0x12, 0xf4, 0x5c, 0x84, 0xb5, 0x30, 0x49,
		0x7a, 0xb6, 0x9a, 0x24, 0xb0, 0x6e, 0xe8, 0xd1, 0x86, 0xb5, 0x30, 0xe9, 0xd6, 0xf3, 0xcb, 0xa4,
		0x1b, 0xac, 0x0d, 0x7a, 0x12, 0x4d, 0xda, 0x98, 0xb4, 0x41, 0x4f, 0xc7, 0xa4, 0x0d, 0xac, 0x1d,
		0x3d, 0x2b, 0xac, 0x1d, 0xd6, 0x8e, 0x9e, 0x2c, 0x93, 0x3c, 0x4d, 0x7a, 0x9e, 0xa7, 0xdd, 0x24,
		0xc4, 0xa4, 0x67, 0xe1, 0x29, 0x32, 0xc9, 0xc7, 0xa4, 0x27, 0x3c, 0x18, 0x26, 0x69, 0x98, 0xf4,
		0x7a, 0xa6, 0xc3, 0xfa, 0x66, 0xd2, 0x43, 0x4f, 0xb7, 0x49, 0x05, 0xb0, 0x16, 0x76, 0x8f, 0x11,
		0x2c, 0x1f, 0x93, 0x16, 0x16, 0x1e, 0x6b, 0x93, 0x7c, 0x00, 0x5a, 0x78, 0x2e, 0xc1, 0xf2, 0x04,
		0x68, 0xe1, 0x29, 0x9b, 0xe4, 0x09, 0xd0, 0xc2, 0x33, 0xc3, 0x42, 0x00, 0x5a, 0x78, 0x0a, 0x4c,
		0x42, 0x58, 0x5b, 0x78, 0xd0, 0x60, 0xf9, 0xb0, 0xb6, 0xf0, 0x24, 0x98, 0x94, 0x60, 0x52, 0x58,
		0x78, 0x3c, 0x61, 0x79, 0x9a, 0x14, 0x16, 0x1e, 0xc4, 0xa4, 0x04, 0x58, 0xb4, 0xf0, 0xf8, 0x98,
		0xe4, 0xc2, 0xa2, 0xf0, 0x68, 0xc0, 0x9a, 0x82, 0x45, 0xe1, 0xf9, 0x66, 0xd2, 0x14, 0x2c, 0x0a,
		0x0f, 0x1e, 0x56, 0x0d, 0x8b, 0xc2, 0x53, 0x65, 0x52, 0x0d, 0x8b, 0xc2, 0xe3, 0xc2, 0xba, 0x83,
		0x45, 0xe1, 0x99, 0x32, 0xe9, 0x0e, 0x16, 0x85, 0xa7, 0x86, 0xa5, 0x87, 0x45, 0xe1, 0xb9, 0x33,
		0x49, 0x0f, 0x8b, 0xc2, 0xa3, 0x87, 0x75, 0x60, 0x51, 0x78, 0x8e, 0x49, 0x07, 0x16, 0x85, 0x27,
		0x87, 0x95, 0xc3, 0xa2, 0xf0, 0xfc, 0x4d, 0xca, 0x61, 0x51, 0x78, 0x7a, 0x58, 0x7f, 0x58, 0x14,
		0x1e, 0xd3, 0xa4, 0x04, 0x93, 0x68, 0xe1, 0x11, 0x58, 0x9e, 0x26, 0xd1, 0xc2, 0x73, 0x83, 0xe5,
		0x09, 0x84, 0x85, 0x67, 0x63, 0x92, 0x27, 0x10, 0x16, 0x9e, 0x1d, 0x16, 0x02, 0x84, 0x85, 0xe7,
		0x99, 0x84, 0xb8, 0x6e, 0xe1, 0x59, 0xc0, 0xf2, 0x71, 0xdd, 0xc2, 0x13, 0x26, 0xf9, 0x00, 0x0b,
		0x0b, 0x0f, 0x61, 0xf9, 0xf0, 0x13, 0x16, 0x5e, 0x93, 0x7c, 0xf8, 0x09, 0x0b, 0xc5, 0x0d,
	}

	//             108	0.921513	8303	35428	TW7	789	sys.snap
	//             109	0.921532	8303	35428	TW7	722	sys.snap
	//             110	0.921548	8303	35428	TW7	737	sys.snap
	// 4th part -> 111	0.921560	8303	35428	TW7	783	sys.snap

	packet = protocol7.Packet{}
	err = packet.Unpack(dumpPart4)
	require.NoError(t, err)

	// content
	require.Equal(t, 1, len(packet.Messages))
	require.Equal(t, network7.MsgSysSnap, packet.Messages[0].MsgId())
	part3, ok := packet.Messages[0].(*messages7.Snap)
	require.Equal(t, true, ok)
	require.Equal(t, 20350, part3.GameTick)
	require.Equal(t, 20351, part3.DeltaTick)
	require.Equal(t, 4, part3.NumParts)
	require.Equal(t, 3, part3.Part)
	require.Equal(t, 488896130, part3.Crc)

	// ------------------------------------
	// client with state and delta unpacker
	// ------------------------------------

	client := teeworlds7.NewClient()

	// part 0-2
	client.SnapshotStorage.AddIncomingData(part0.Part, part0.NumParts, part0.Data)
	client.SnapshotStorage.AddIncomingData(part1.Part, part1.NumParts, part1.Data)
	client.SnapshotStorage.AddIncomingData(part2.Part, part2.NumParts, part2.Data)

	// part3 (last)
	client.SnapshotStorage.AddIncomingData(part3.Part, part3.NumParts, part3.Data)
	// we don't have the actual prev snap here
	// just use an empty snap should be fine too
	// then the final values will be wrong but it should still parse correctly i think
	prevSnap, found := client.SnapshotStorage.Get(snapshot7.EmptySnapTick)
	require.True(t, found)

	u := &packer.Unpacker{}
	u.Reset(client.SnapshotStorage.IncomingData())

	newFullSnap, err := snapshot7.UnpackDelata(prevSnap, u)
	require.NoError(t, err)

	err = client.SnapshotStorage.Add(part2.GameTick, newFullSnap)
	require.NoError(t, err)

	// this value is untested but it looks goodish
	// the snap was peeking around the max of 1024 items
	// and since we don't have the delta the 299 means
	// that there were 299 changes or additions which could be true
	require.Equal(t, 299, len(newFullSnap.Items))
}
