package teeworlds7_test

import (
	"testing"

	"github.com/teeworlds-go/protocol/internal/testutils/require"
	"github.com/teeworlds-go/protocol/messages7"
	"github.com/teeworlds-go/protocol/network7"
	"github.com/teeworlds-go/protocol/object7"
	"github.com/teeworlds-go/protocol/packer"
	"github.com/teeworlds-go/protocol/protocol7"
	"github.com/teeworlds-go/protocol/snapshot7"
	"github.com/teeworlds-go/protocol/teeworlds7"
)

func TestUnpackDelta(t *testing.T) {
	t.Parallel()
	// snapshot captured with tcpdump
	// generated by a vanilla teeworlds 0.7.5 server
	// used the protocol sample client to connect to the server
	//
	// libtw2 dissector details
	// Teeworlds 0.7 Protocol packet
	// Teeworlds 0.7 Protocol chunk: game.sv_game_info
	//     Header (vital: 9)
	//     Message: game.sv_game_info
	//     Game flags: none (0x0)
	//     Score limit: 20
	//     Time limit: 0
	//     Match num: 0
	//     Match current: 1
	// Teeworlds 0.7 Protocol chunk: game.sv_client_info
	//     Header (vital: 10)
	//     Message: game.sv_client_info
	//     Client id: 0
	//     Local: true
	//     Team: red
	//     Name: "nameless tee"
	//     Clan: ""
	//     Country: 0
	//     Skin part names: "greensward"
	//     Skin part names: "duodonny"
	//     Skin part names: ""
	//     Skin part names: "standard"
	//     Skin part names: "standard"
	//     Skin part names: "standard"
	//     Use custom colors: false
	//     Use custom colors: false
	//     Use custom colors: false
	//     Use custom colors: false
	//     Use custom colors: false
	//     Use custom colors: false
	//     Skin part colors: 0
	//     Skin part colors: 0
	//     Skin part colors: 0
	//     Skin part colors: 0
	//     Skin part colors: 0
	//     Skin part colors: 0
	//     Silent: false
	// Teeworlds 0.7 Protocol chunk: sys.snap_single
	//     Header (non-vital)
	//     Message: sys.snap_single
	//     Tick: 1300
	//     Delta tick: 1301
	//     Crc: 2205
	//     Data (45 bytes)
	dumpSnap1 := []byte{
		0x10, 0x04, 0x03, 0x01, 0x02, 0x03, 0x04,
		0x4a, 0x36, 0x4c, 0xed, 0xe1, 0x47, 0xde, 0x6a, 0x3d, 0x8c, 0xd8, 0xb5, 0x73, 0x14, 0x1d,
		0x71, 0x82, 0x2b, 0xc1, 0x09, 0x74, 0x4a, 0xa7, 0xac, 0xa1, 0x84, 0x13, 0x38, 0xe1, 0x74, 0x0e,
		0x4e, 0x9c, 0xc0, 0x09, 0xae, 0x9d, 0x4e, 0x15, 0xb7, 0x1c, 0x05, 0x27, 0x4e, 0xcc, 0x89, 0xb6,
		0xd4, 0x16, 0x71, 0xa2, 0x2d, 0x72, 0xed, 0xae, 0x1d, 0xca, 0xa7, 0x53, 0x28, 0xe1, 0x28, 0xd7,
		0xce, 0x89, 0x1c, 0x05, 0x27, 0x4e, 0x4c, 0xa7, 0x50, 0xc2, 0x51, 0xae, 0x9d, 0x13, 0x39, 0x0a,
		0x4e, 0x9c, 0x98, 0x4e, 0xa1, 0x84, 0xa3, 0x5c, 0x3b, 0x27, 0x72, 0x14, 0x9c, 0x38, 0xf1, 0xff,
		0xcf, 0xd1, 0xa6, 0x0c, 0x78, 0xc5, 0xe0, 0x7d, 0xac, 0xdb, 0xd6, 0x5e, 0x9b, 0xb1, 0x7e, 0x93,
		0x72, 0x58, 0xef, 0x2b, 0xfd, 0xfa, 0x7a, 0xbc, 0x7f, 0x32, 0xb7, 0x49, 0x39, 0xac, 0xa7, 0xb8,
		0x01,
	}

	// 1st snap ->   13	0.071199	8303	41371	TW7	177	game.sv_game_info, game.sv_client_info, sys.snap_single
	//               14	0.080666	41371	8303	TW7	67	sys.input
	//               15	0.111582	8303	41371	TW7	115	sys.input_timing, sys.snap_single

	conn := protocol7.Session{}

	packet := protocol7.Packet{}
	err := packet.Unpack(dumpSnap1)
	require.NoError(t, err)

	conn.Ack = packet.Header.Ack
	// TODO: one day this should work
	// repack := packet.Pack(&conn)
	// require.Equal(t, dump, repack)

	// content
	require.Equal(t, 3, len(packet.Messages))
	require.Equal(t, network7.MsgSysSnapSingle, packet.Messages[2].MsgId())
	snapSingle1, ok := packet.Messages[2].(*messages7.SnapSingle)
	require.Equal(t, true, ok)

	// unverified
	require.Equal(t, 4, snapSingle1.Snapshot.NumItemDeltas)
	require.Equal(t, 0, snapSingle1.Snapshot.NumRemovedItems)
	require.Equal(t, 4, len(snapSingle1.Snapshot.Items))

	// matches libtw2
	require.Equal(t, 2205, snapSingle1.Snapshot.Crc)

	// unverified
	item := snapSingle1.Snapshot.Items[0]
	require.Equal(t, network7.ObjGameData, item.TypeId())
	gameData, ok := item.(*object7.GameData)
	require.Equal(t, true, ok)
	require.Equal(t, 0, gameData.Id())
	require.Equal(t, 0, gameData.GameStartTick)
	require.Equal(t, 1, gameData.FlagsRaw)
	require.Equal(t, 0, gameData.GameStateEndTick)

	item = snapSingle1.Snapshot.Items[1]
	require.Equal(t, network7.ObjCharacter, item.TypeId())
	character, ok := item.(*object7.Character)
	require.Equal(t, true, ok)
	require.Equal(t, 0, character.Id())
	require.Equal(t, 0, character.Tick)
	require.Equal(t, 784, character.X)
	require.Equal(t, 304, character.Y)
	require.Equal(t, 0, character.VelX)
	require.Equal(t, 0, character.VelY)
	require.Equal(t, 0, character.Angle)
	require.Equal(t, 0, character.Direction)
	require.Equal(t, 0, character.Jumped)
	require.Equal(t, -1, character.HookedPlayer)
	require.Equal(t, 0, character.HookState)
	require.Equal(t, 0, character.HookTick)
	require.Equal(t, 0, character.HookX)
	require.Equal(t, 0, character.HookY)
	require.Equal(t, 0, character.HookDx)
	require.Equal(t, 0, character.HookDy)
	require.Equal(t, 10, character.Health)
	require.Equal(t, 0, character.Armor)
	require.Equal(t, 10, character.AmmoCount)
	require.Equal(t, network7.WeaponGun, character.Weapon)
	require.Equal(t, network7.EyeEmoteNormal, character.Emote)
	require.Equal(t, 0, character.AttackTick)
	require.Equal(t, 0, character.TriggeredEvents)

	item = snapSingle1.Snapshot.Items[2]
	require.Equal(t, network7.ObjPlayerInfo, item.TypeId())
	playerInfo, ok := item.(*object7.PlayerInfo)
	require.Equal(t, 8, playerInfo.PlayerFlags)
	require.Equal(t, 0, playerInfo.Score)
	require.Equal(t, 0, playerInfo.Latency)

	// Teeworlds 0.7 Protocol packet
	//     Flags: compressed (..01 00..)
	//     Acknowledged sequence number: 4 (.... ..00 0000 0100)
	//     Number of chunks: 2
	//     Token: 01020304
	//     Compressed payload (66 bytes)
	// Teeworlds 0.7 Protocol chunk: sys.input_timing
	//     Header (non-vital)
	//     Message: sys.input_timing
	//     Input pred tick: 1300
	//     Time left: -10
	// Teeworlds 0.7 Protocol chunk: sys.snap_single
	//     Header (non-vital)
	//     Message: sys.snap_single
	//     Tick: 1302
	//     Delta tick: 2
	//     Crc: 12075
	//     Data (71 bytes)
	dumpSnap2 := []byte{
		0x10, 0x04, 0x02, 0x01, 0x02, 0x03, 0x04,
		0x3d, 0xdf, 0x0c, 0x78, 0x4a, 0x54, 0x9b, 0x92, 0x01, 0x2f, 0xa8, 0xe7, 0x85, 0xae, 0x46,
		0xb4, 0x09, 0x80, 0x49, 0xf4, 0x10, 0xd6, 0x37, 0x93, 0x1e, 0x7a, 0xc2, 0x24, 0x0d, 0x93, 0x5e,
		0xcf, 0xc2, 0x24, 0x1f, 0x93, 0x9e, 0xf0, 0x3c, 0x93, 0x10, 0x93, 0x9e, 0x85, 0x67, 0x37, 0xc9,
		0xd3, 0xa4, 0xe7, 0xe9, 0x2b, 0x06, 0x1f, 0x03, 0xc1, 0x37, 0x36, 0xdf, 0xa4, 0x1c, 0xd6, 0xfb,
		0xaf, 0xb8, 0x01,
	}

	//               13	0.071199	8303	41371	TW7	177	game.sv_game_info, game.sv_client_info, sys.snap_single
	//               14	0.080666	41371	8303	TW7	67	sys.input
	// 2nd snap ->   15	0.111582	8303	41371	TW7	115	sys.input_timing, sys.snap_single

	packet = protocol7.Packet{}
	err = packet.Unpack(dumpSnap2)
	require.NoError(t, err)

	require.Equal(t, 2, len(packet.Messages))

	require.Equal(t, true, packet.Messages[0].System())
	require.Equal(t, network7.MsgSysInputTiming, packet.Messages[0].MsgId())

	require.Equal(t, true, packet.Messages[1].System())
	require.Equal(t, network7.MsgSysSnapSingle, packet.Messages[1].MsgId())
	snapSingle2, ok := packet.Messages[1].(*messages7.SnapSingle)
	require.Equal(t, true, ok)

	// unverified
	require.Equal(t, 6, snapSingle2.Snapshot.NumItemDeltas)
	require.Equal(t, 1, snapSingle2.Snapshot.NumRemovedItems)
	require.Equal(t, 6, len(snapSingle2.Snapshot.Items))

	// ------------------------------------
	// client with state and delta unpacker
	// ------------------------------------

	client := teeworlds7.NewClient()

	// snap1
	require.Equal(t, 1300, snapSingle1.GameTick)
	deltaTick := snapSingle1.GameTick - snapSingle1.DeltaTick
	prevSnap, found := client.SnapshotStorage.Get(deltaTick)
	require.True(t, found)

	u := &packer.Unpacker{}
	u.Reset(snapSingle1.Data)

	newFullSnap, err := snapshot7.UnpackDelta(prevSnap, u)
	require.NoError(t, err)

	err = client.SnapshotStorage.Add(snapSingle1.GameTick, newFullSnap)
	require.NoError(t, err)

	client.SnapshotStorage.PurgeUntil(deltaTick)

	// snap2
	deltaTick = snapSingle2.GameTick - snapSingle2.DeltaTick
	prevSnap, found = client.SnapshotStorage.Get(deltaTick)
	require.True(t, found)

	u.Reset(snapSingle2.Data)

	newFullSnap, err = snapshot7.UnpackDelta(prevSnap, u)
	require.NoError(t, err)

	err = client.SnapshotStorage.Add(snapSingle2.GameTick, newFullSnap)
	require.NoError(t, err)

	client.SnapshotStorage.PurgeUntil(deltaTick)
}
